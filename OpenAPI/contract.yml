openapi: 3.0.1
info:
  title: Bookstore API
  version: 1.1.0
  description: Comprehensive API for managing bookstore operations including orders, customers, and admins
servers:
  - url: 'http://localhost:8080/'
    description: Development Environment

tags:
  - name: Orders
    description: Operations related to orders
  - name: Customers
    description: Operations related to customers
  - name: Admins
    description: Operations related to administrators
  - name: Books
    description: Operations related to books
  - name: Auth
    description: Authentication operations


paths:
  # Orders endpoints
  /admin/order:
    get:
      tags:
        - Orders
      summary: Find all orders
      description: Retrieve a paginated list of orders
      operationId: findAllOrders
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Page size
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/PaginatedOrderResponse'
              examples:
                ordersExample:
                  $ref: '#/components/examples/ordersExample'
        '400':
          description: Invalid pagination parameters
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

  /order:
    post:
      tags:
        - Orders
      summary: Place a new order
      description: Create a new order with customer, book, and items
      operationId: placeOrder
      requestBody:
        required: true
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/orderRequest'
            example:
              customer:
                id: 1
                username: "John Doe"
              items:
                - book:
                    id: 1
                    title: "Spring Boot Guide"
                    price: 29.99
                  quantity: 2
      responses:
        '201':
          description: Successfully created the order
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/orderResponse'
        '400':
          description: Invalid request body (missing fields, invalid format)
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'
        '404':
          description: Customer or Book not found
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'
        '409':
          description: Requested quantity exceeds available stock
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

  /admin/order/{id}:
    get:
      tags:
        - Orders
      summary: Find order by ID
      description: Retrieve a specific order by its ID
      operationId: findOrderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order
      responses:
        '200':
          description: Successfully retrieved the order
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/orderResponse'
        '404':
          description: Order not found
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

  /order/customer:
    get:
      tags:
        - Orders
      summary: Find Previous orders For Logged In Customer
      description: Retrieve all orders by logged-in customer id
      operationId: findPreviousOrders
      responses:
        '200':
          description: Successfully retrieved the orders
          content:
            application/json;charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/orderResponse'
        '404':
          description: Order not found
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'


    delete:
      tags:
        - Orders
      summary: Delete order by ID
      description: Delete a specific order by its ID
      operationId: deleteOrderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order to delete
      responses:
        '204':
          description: Successfully deleted the order
        '404':
          description: Order not found
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

    patch:
      tags:
        - Orders
      summary: Update an order
      description: Update specific fields of an order (e.g., status, items)
      operationId: updateOrder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json;charset=utf-8:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [PLACED, PROCESSING, COMPLETED, CANCELLED]
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/orderItemRequest'
      responses:
        '200':
          description: Successfully updated the order
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/orderResponse'
        '400':
          description: Invalid update request
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'
        '404':
          description: Order not found
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'
        '409':
          description: Update conflict (e.g., changing to invalid status)
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

  # Customer endpoints
  /customer:
    get:
      summary: Get all customers (paginated)
      tags:
        - Customers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'





  /customer/{id}:
    get:
      summary: Get customer by ID
      tags: ["Customers"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

    delete:
      summary: Delete customer by ID
      tags: ["Customers"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Customer deleted

  # Admin endpoints
  /admin:
    get:
      summary: Get all admins (paginated)
      tags: ["Admins"]
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: size
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of admins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'



  /admin/{id}:
    get:
      summary: Get admin by ID
      tags: ["Admins"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Admin details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'

    delete:
      summary: Delete admin by ID
      tags: ["Admins"]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Admin deleted

  /admin/create-user:
    post:
      summary: Create a new user with role (Admin only)
      tags: ["Admins"]
      operationId: createUserWithRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden - Admin access required

  /admin/{id}/update-book-field:
    patch:
      summary: Log a book field update
      tags: ["Admins"]
      operationId: logBookFieldUpdate
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookFieldUpdate'
      responses:
        '200':
          description: Book field update logged

  # Books endpoints
  /book:
    get:
      tags:
        - Books
      summary: Find all books
      description: Retrieve a paginated list of books
      operationId: findAllBooks
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
        - in: query
          name: size
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successfully retrieved books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books'
              examples:
                booksExample:
                  $ref: '#/components/examples/booksExample'

    post:
      tags:
        - Books
      summary: Create a new book
      description: Add a new book to the system
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
      responses:
        '201':
          description: Successfully created book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'

  /book/{id}:
    get:
      tags:
        - Books
      summary: Find book by ID
      description: Retrieve a specific book by ID
      operationId: findBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'



    delete:
      tags:
        - Books
      summary: Delete book by ID
      description: Delete a specific book
      operationId: deleteBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfully deleted the book
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
  /book/isbn/{isbn}:
    get:
      tags:
        - Books
      summary: Find book by ISBN
      description: Retrieve a specific book by its ISBN
      operationId: findBookByIsbn
      parameters:
        - in: path
          name: isbn
          required: true
          schema:
            type: string
            pattern: '^(97[89])?[0-9]{9}[0-9X]$'
          description: 'ISBN-10 or ISBN-13 of the book'
          example: '9780134685991'
      responses:
        '200':
          description: Successfully retrieved the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        '401':
          description: Unauthorized

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register new customer
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Customer registered successfully
        '400':
          description: Bad request


components:
  schemas:
    # Order-related schemas
    PaginatedOrderResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/orderResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer


    orderRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum: [PLACED, PROCESSING, COMPLETED, CANCELLED]
        customer:
          $ref: '#/components/schemas/CustomerReference'
        items:
          type: array
          items:
            $ref: '#/components/schemas/orderItemRequest'

    orderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        orderDate:
          type: string
          format: date-time
        totalPrice:
          type: number
          format: float
        status:
          type: string
          enum: [PLACED, PROCESSING, COMPLETED, CANCELLED]
        customer:
          $ref: '#/components/schemas/CustomerReference'
        items:
          type: array
          items:
            $ref: '#/components/schemas/orderItemResponse'

    orderItemRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        quantity:
          type: integer
        book:
          $ref: '#/components/schemas/BookRequestDto'

    orderItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        quantity:
          type: integer
        price:
          type: number
          format: float
        book:
          $ref: '#/components/schemas/BookResponseDto'


    # Customer-related schemas
    CustomerReference:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string

    Customer:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        address:
          type: string
        balance:
          type: number
          format: float

    # Book-related schemas
    books:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/book'

    book:
      type: object
      required:
        - isbn
        - title
        - author
      properties:
        id:
          type: integer
          format: int64
        isbn:
          type: string
          pattern: '^(97[89])?[0-9]{9}[0-9X]$'
          description: 'International Standard Book Number (ISBN-10 or ISBN-13)'
          example: '9780134685991'
        author:
          type: string
        title:
          type: string
        description:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: float

    BookResponseDto:
      type: object
      required:
        - isbn
        - title
        - author
      properties:
        isbn:
          type: string
          pattern: '^(97[89])?[0-9]{9}[0-9X]$'
          description: 'International Standard Book Number (ISBN-10 or ISBN-13)'
          example: '9780134685991'
        author:
          type: string
        title:
          type: string
        description:
          type: string
        price:
          type: number
          format: float

    BookRequestDto:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64

    # Admin-related schemas
    Admin:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string

    BookFieldUpdate:
      type: object
      properties:
        field:
          type: string
        oldValue:
          type: string
        newValue:
          type: string

    # Error schema
    CustomError:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
        password:
          type: string
          minLength: 6
          maxLength: 100
        email:
          type: string
          format: email
          minLength: 5
          maxLength: 50

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
        password:
          type: string
          minLength: 6
          maxLength: 100

    JwtResponse:
      type: object
      properties:
        token:
          type: string

    CreateUserRequest:
      type: object
      required:
        - username
        - password
        - email
        - role
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
        password:
          type: string
          minLength: 6
          maxLength: 100
        email:
          type: string
          format: email
          minLength: 5
          maxLength: 50
        role:
          type: string
          description: Role of the user
          enum: [CUSTOMER, ADMIN]

  examples:
    ordersExample:
      value:
        orders:
          - id: 1
            orderDate: "2025-08-14T15:30:00Z"
            totalPrice: 59.98
            status: PLACED
            customer:
              id: 1
              username: "John Doe"
            items:
              - id: 1
                quantity: 2
                price: 59.98
                book:
                  id: 1
                  title: "Spring Boot Guide"
                  price: 29.99

    booksExample:
      value:
        books:
          - id: 1
            isbn: "9780451524935"
            author: "George Orwell"
            title: "1984"
            description: "Dystopian novel"
            quantity: 100
            price: 19.99
          - id: 2
            isbn: "9780439708180"
            author: "J.K. Rowling"
            title: "Harry Potter and the Sorcerer's Stone"
            description: "Fantasy novel"
            quantity: 200
            price: 24.99

    customerExample:
      value:
        id: 101
        email: "alice.smith@example.com"
        username: "Alice Smith"
        address: "123 Maple Street, Springfield"
        balance: 150.75

    adminExample:
      value:
        id: 1
        username: "Admin User"
        email: "admin@bookstore.com"

    bookFieldUpdateExample:
      value:
        field: "price"
        oldValue: "24.99"
        newValue: "19.99"

    errorNotFoundExample:
      value:
        status: 404
        message: "The requested resource was not found"

    errorValidationExample:
      value:
        status: 400
        message: "Invalid request: 'email' field must be a valid email address"
