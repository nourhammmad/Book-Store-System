openapi: 3.0.1
info:
  title: Bookstore API
  version: 1.1.0
  description: Comprehensive API for managing bookstore operations including orders, customers, and admins
servers:
  - url: 'http://localhost:8080/'
    description: Development Environment

tags:
  - name: Orders
    description: Operations related to orders
  - name: Customers
    description: Operations related to customers
  - name: Admins
    description: Operations related to administrators
  - name: Books
    description: Operations related to books
  - name: Auth
    description: Authentication operations
  - name: Files
    description: Operations related to files

paths:
  # Orders endpoints
  /admin/order:
    get:
      tags:
        - Orders
      security:
        - bearerAuth: [ ]
      summary: Find all orders
      description: Retrieve a paginated list of orders
      operationId: findAllOrders
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Page size
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderResponse'
              examples:
                ordersExample:
                  $ref: '#/components/examples/ordersExample'
        '400':
          description: Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  /order:
    get:
      tags:
        - Orders
      security:
        - bearerAuth: [ ]
      summary: Find Previous orders For Logged In Customer
      description: Retrieve all orders by logged-in customer id
      operationId: findPreviousOrders
      responses:
        '200':
          description: Successfully retrieved the orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
    post:
      tags:
        - Orders
      security:
        - bearerAuth: [ ]
      summary: Place a new order
      description: Create a new order with customer, book, and items
      operationId: placeOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
            examples:
              orderRequestExample:
                $ref: '#/components/examples/orderRequestExample'
      responses:
        '201':
          description: Successfully created the order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request body (missing fields, invalid format)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CustomError'
                  - $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  $ref: '#/components/examples/errorBadRequestExample'
                validationExample:
                  $ref: '#/components/examples/errorValidationExample'
        '404':
          description: Customer or Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              examples:
                notFoundExample:
                  $ref: '#/components/examples/errorNotFoundExample'
        '409':
          description: Requested quantity exceeds available stock
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  /order/{id}:
    patch:
      tags:
        - Orders
      security:
        - bearerAuth: [ ]
      summary: Cancel an order
      description: Cancel a specific order by its ID
      operationId: cancelOrder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order to cancel
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrderRequest'
            example:
              reason: "Item no longer needed"
      responses:
        '200':
          description: Successfully canceled the order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request (e.g., order already shipped)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  /admin/order/{id}:
    get:
      tags:
        - Orders
      security:
        - bearerAuth: [ ]
      summary: Find order by ID
      description: Retrieve a specific order by its ID
      operationId: findOrderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order
      responses:
        '200':
          description: Successfully retrieved the order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
    delete:
      tags:
        - Orders
      security:
        - bearerAuth: [ ]
      summary: Delete order by ID
      description: Delete a specific order by its ID
      operationId: deleteOrderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order to delete
      responses:
        '204':
          description: Successfully deleted the order
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
    put:
      tags:
        - Orders
      security:
        - bearerAuth: [ ]
      summary: Update order status
      description: Update the status of a specific order by its ID
      operationId: updateOrderStatus
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
            example:
              status: "SHIPPED"
      responses:
        '200':
          description: Successfully updated the order status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request body (missing fields, invalid format)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CustomError'
                  - $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  $ref: '#/components/examples/errorBadRequestExample'
                validationExample:
                  $ref: '#/components/examples/errorValidationExample'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        '409':
          description: Invalid status transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  # Customer endpoints
  /customer:
    get:
      summary: Get all customers (paginated)
      tags:
        - Customers
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomerResponse'
              examples:
                customersExample:
                  $ref: '#/components/examples/customersExample'

  /customer/{id}:
    get:
      summary: Get customer by ID
      tags:
        - Customers
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                customerExample:
                  $ref: '#/components/examples/customerExample'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

    delete:
      summary: Delete customer by ID
      tags:
        - Customers
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Customer deleted
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  # Admin endpoints
  /admin:
    get:
      summary: Get all admins (paginated)
      tags:
        - Admins
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of admins
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAdminResponse'
              examples:
                adminsExample:
                  $ref: '#/components/examples/adminsExample'

  /admin/{id}:
    get:
      summary: Get admin by ID
      tags:
        - Admins
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Admin details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
              examples:
                adminExample:
                  $ref: '#/components/examples/adminExample'
        '404':
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

    delete:
      summary: Delete admin by ID
      tags:
        - Admins
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Admin deleted
        '404':
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  /admin/create-user:
    post:
      summary: Create a new user with role (Admin only)
      tags:
        - Admins
      security:
        - bearerAuth: [ ]
      operationId: createUserWithRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              createUserRequestExample:
                $ref: '#/components/examples/createUserRequestExample'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreatedResponse'
              examples:
                userCreatedResponseExample:
                  $ref: '#/components/examples/userCreatedResponseExample'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CustomError'
                  - $ref: '#/components/schemas/ValidationError'
              examples:
                badRequestExample:
                  $ref: '#/components/examples/errorBadRequestExample'
                validationExample:
                  $ref: '#/components/examples/errorValidationExample'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              examples:
                forbiddenExample:
                  $ref: '#/components/examples/errorForbiddenExample'

  /admin/book/{id}/update-field:
    patch:
      summary: Log a book field update
      tags:
        - Admins
      security:
        - bearerAuth: [ ]
      operationId: logBookFieldUpdate
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookFieldUpdate'
            examples:
              bookFieldUpdateExample:
                $ref: '#/components/examples/bookFieldUpdateExample'
      responses:
        '200':
          description: Book field update logged
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  # Books endpoints
  /book:
    get:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      summary: Find all books
      description: Retrieve a paginated list of books
      operationId: findAllBooks
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Page size
      responses:
        '200':
          description: Successfully retrieved books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookResponse'
              examples:
                booksExample:
                  $ref: '#/components/examples/booksExample'

    post:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      summary: Create a new book
      description: Add a new book to the system
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreateRequest'
      responses:
        '201':
          description: Successfully created book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              examples:
                bookExample:
                  $ref: '#/components/examples/bookExample'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  /book/{id}:
    get:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      summary: Find book by ID
      description: Retrieve a specific book by ID
      operationId: findBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              examples:
                bookExample:
                  $ref: '#/components/examples/bookExample'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

    delete:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      summary: Delete book by ID
      description: Delete a specific book
      operationId: deleteBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfully deleted the book
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  /book/{id}/cover:
    post:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      summary: Upload a cover image for a book
      description: Uploads a cover image file for the specified book and updates its cover image URL
      operationId: uploadBookCover
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the book
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
      responses:
        '200':
          description: Successfully uploaded the cover image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  /book/isbn/{isbn}:
    get:
      tags:
        - Books
      security:
        - bearerAuth: [ ]
      summary: Find book by ISBN
      description: Retrieve a specific book by its ISBN
      operationId: findBookByIsbn
      parameters:
        - in: path
          name: isbn
          required: true
          schema:
            type: string
            pattern: '^(97[89])?[0-9]{9}[0-9X]$'
          description: 'ISBN-10 or ISBN-13 of the book'
          example: '9780134685991'
      responses:
        '200':
          description: Successfully retrieved the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              examples:
                bookExample:
                  $ref: '#/components/examples/bookExample'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

  # Auth endpoints
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              loginRequestExample:
                $ref: '#/components/examples/loginRequestExample'
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
              examples:
                jwtResponseExample:
                  $ref: '#/components/examples/jwtResponseExample'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              examples:
                unauthorizedExample:
                  $ref: '#/components/examples/errorUnauthorizedExample'

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register new customer
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              registerRequestExample:
                $ref: '#/components/examples/registerRequestExample'
      responses:
        '201':
          description: Customer registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
              examples:
                registerResponseExample:
                  $ref: '#/components/examples/registerResponseExample'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'
              examples:
                conflictExample:
                  $ref: '#/components/examples/errorConflictExample'

  /files/{filename}:
    get:
      tags:
        - Files
      security:
        - bearerAuth: [ ]
      summary: Serve a book cover file
      description: Returns the requested book cover image file by filename
      operationId: serveFile
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: Name of the file to retrieve (e.g., cover.jpg)
      responses:
        '200':
          description: The requested file
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    PaginatedOrderResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 10
        totalElements:
          type: integer
          format: int64
          example: 1
        totalPages:
          type: integer
          example: 1
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: true
      required: ["content", "page", "size", "totalElements", "totalPages"]

    PaginatedBookResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 10
        totalElements:
          type: integer
          format: int64
          example: 2
        totalPages:
          type: integer
          example: 1
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: true
      required: ["content", "page", "size", "totalElements", "totalPages"]

    PaginatedCustomerResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 10
        totalElements:
          type: integer
          format: int64
          example: 2
        totalPages:
          type: integer
          example: 1
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: true
      required: ["content", "page", "size", "totalElements", "totalPages"]

    PaginatedAdminResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Admin'
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 10
        totalElements:
          type: integer
          format: int64
          example: 2
        totalPages:
          type: integer
          example: 1
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: true
      required: ["content", "page", "size", "totalElements", "totalPages"]

    OrderRequest:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'
          minItems: 1
      required: ["items"]

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        orderDate:
          type: string
          format: date-time
          example: "2025-08-14T15:30:00Z"
        totalPrice:
          type: number
          format: float
          minimum: 0
          example: 59.98
        status:
          type: string
          enum: ["PLACED", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED"]
          example: "PLACED"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
      required: ["id", "orderDate", "totalPrice", "status", "customer", "items"]

    OrderItemRequest:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/BookReference'
        quantity:
          type: integer
          minimum: 1
          example: 2
      required: ["book", "quantity"]

    OrderItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          minimum: 1
          example: 2
        price:
          type: number
          format: float
          minimum: 0
          example: 59.98
        book:
          $ref: '#/components/schemas/BookResponse'
      required: ["id", "quantity", "price", "book"]

    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 101
        email:
          type: string
          format: email
          example: "alice.smith@example.com"
        username:
          type: string
          minLength: 3
          maxLength: 20
          example: "alice_smith"
        address:
          type: string
          example: "123 Maple Street, Springfield"
        balance:
          type: number
          format: float
          minimum: 0
          example: 150.75
      required: ["id", "email", "username"]

    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        isbn:
          type: string
          pattern: '^(97[89])?[0-9]{9}[0-9X]$'
          description: International Standard Book Number (ISBN-10 or ISBN-13)
          example: "9780451524935"
        author:
          type: string
          minLength: 1
          example: "George Orwell"
        title:
          type: string
          minLength: 1
          example: "1984"
        description:
          type: string
          example: "Dystopian novel about totalitarian surveillance"
        quantity:
          type: integer
          minimum: 0
          example: 100
        price:
          type: number
          format: float
          minimum: 0
          example: 19.99
        coverImageUrl:
          type: string
          description: URL of the book's cover
          example: "/files/book-1-cover.jpg"
      required: ["id", "isbn", "title", "author", "price"]

    BookCreateRequest:
      type: object
      properties:
        isbn:
          type: string
          pattern: '^(97[89])?[0-9]{9}[0-9X]$'
          description: International Standard Book Number (ISBN-10 or ISBN-13)
          example: "9780451524935"
        author:
          type: string
          minLength: 1
          example: "George Orwell"
        title:
          type: string
          minLength: 1
          example: "1984"
        description:
          type: string
          example: "Dystopian novel about totalitarian surveillance"
        quantity:
          type: integer
          minimum: 0
          default: 0
          example: 100
        price:
          type: number
          format: float
          minimum: 0
          example: 19.99
      required: ["isbn", "title", "author", "price"]

    BookUpdateRequest:
      type: object
      properties:
        author:
          type: string
          minLength: 1
          example: "George Orwell"
        title:
          type: string
          minLength: 1
          example: "1984"
        description:
          type: string
          example: "Dystopian novel about totalitarian surveillance"
        quantity:
          type: integer
          minimum: 0
          example: 100
        price:
          type: number
          format: float
          minimum: 0
          example: 19.99

    BookResponse:
      type: object
      properties:
        isbn:
          type: string
          pattern: '^(97[89])?[0-9]{9}[0-9X]$'
          description: International Standard Book Number (ISBN-10 or ISBN-13)
          example: "9780134685991"
        author:
          type: string
          example: "John Smith"
        title:
          type: string
          example: "Spring Boot Guide"
        description:
          type: string
          example: "Comprehensive guide to Spring Boot development"
        price:
          type: number
          format: float
          minimum: 0
          example: 29.99
      required: ["id", "isbn", "title", "author", "price"]

    BookReference:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
      required: ["id"]

    Admin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          minLength: 3
          maxLength: 20
          example: "admin_user"
        email:
          type: string
          format: email
          example: "admin@bookstore.com"
      required: ["id", "username", "email"]

    BookFieldUpdate:
      type: object
      properties:
        field:
          type: string
          enum: ["title", "author", "description", "price", "quantity"]
          example: "price"
        oldValue:
          type: string
          example: "24.99"
        newValue:
          type: string
          example: "19.99"
      required: ["field", "oldValue", "newValue"]

    CustomError:
      type: object
      properties:
        success:
          type: boolean
          default: false
          example: false
        timestamp:
          type: string
          format: date-time
          example: "2025-08-23T10:30:00"
        message:
          type: string
          example: "Entity not found"
        details:
          type: string
          example: "uri=/book/999"
        httpStatus:
          type: string
          enum: ["BAD_REQUEST", "UNAUTHORIZED", "FORBIDDEN", "NOT_FOUND", "CONFLICT", "INTERNAL_SERVER_ERROR"]
          example: "NOT_FOUND"
      required: ["success", "timestamp", "message", "details", "httpStatus"]

    ValidationError:
      type: object
      properties:
        timeStamp:
          type: string
          format: date-time
          example: "2025-08-23T10:30:00"
        httpStatus:
          type: string
          enum: ["BAD_REQUEST"]
          example: "BAD_REQUEST"
        violations:
          type: array
          items:
            $ref: '#/components/schemas/ViolationError'
      required: ["timeStamp", "httpStatus", "violations"]

    ViolationError:
      type: object
      properties:
        field:
          type: string
          example: "email"
        message:
          type: string
          example: "must be a well-formed email address"
      required: ["field", "message"]

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          pattern: '^[a-zA-Z0-9_]+'
          example: "new_user"
        password:
          type: string
          minLength: 6
          maxLength: 100
          example: "securePassword123"
        email:
          type: string
          format: email
          minLength: 5
          maxLength: 50
          example: "newuser@example.com"
      required: ["username", "password", "email"]

    RegisterResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 103
        username:
          type: string
          example: "new_user"
        email:
          type: string
          format: email
          example: "newuser@example.com"
        message:
          type: string
          example: "User registered successfully"
      required: ["id", "username", "email", "message"]

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          example: "john_doe"
        password:
          type: string
          minLength: 6
          maxLength: 100
          example: "mypassword"
      required: ["username", "password"]

    JwtResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type:
          type: string
          default: "Bearer"
          example: "Bearer"
        username:
          type: string
          example: "john_doe"
        role:
          type: string
          enum: ["CUSTOMER", "ADMIN"]
          example: "CUSTOMER"
      required: ["token", "username", "role"]

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          pattern: '^[a-zA-Z0-9_]+'
          example: "new_admin"
        password:
          type: string
          minLength: 6
          maxLength: 100
          example: "adminPassword123"
        email:
          type: string
          format: email
          minLength: 5
          maxLength: 50
          example: "newadmin@bookstore.com"
        role:
          type: string
          description: Role of the user
          enum: ["CUSTOMER", "ADMIN"]
          example: "ADMIN"
      required: ["username", "password", "email", "role"]

    UserCreatedResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        username:
          type: string
          example: "new_admin"
        email:
          type: string
          format: email
          example: "newadmin@bookstore.com"
        role:
          type: string
          enum: ["CUSTOMER", "ADMIN"]
          example: "ADMIN"
        message:
          type: string
          example: "Admin user created successfully"
      required: ["id", "username", "email", "role", "message"]

    UpdateOrderStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum: ["PLACED", "PROCESSING", "SHIPPED", "DELIVERED", "CANCELLED"]
          example: "SHIPPED"
      required: ["status"]

    CancelOrderRequest:
      type: object
      properties:
        reason:
          type: string
          minLength: 1
          maxLength: 255
          example: "Item no longer needed"
      required: ["reason"]

    FileUploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
          description: The image file to upload
      required: ["file"]

    FileUploadResponse:
      type: object
      properties:
        url:
          type: string
          example: "/files/3f1e2d3c-4b5a-6789-0abc-def123456789_cover.jpg"

  examples:
    ordersExample:
      summary: Example orders response
      description: A sample response showing paginated orders
      value:
        content:
          - id: 1
            orderDate: "2025-08-14T15:30:00Z"
            totalPrice: 59.98
            status: "PLACED"
            customer:
              id: 1
              username: "John Doe"
            items:
              - id: 1
                quantity: 2
                price: 59.98
                book:
                  id: 1
                  isbn: "9780134685991"
                  title: "Spring Boot Guide"
                  author: "John Smith"
                  price: 29.99
        page: 0
        size: 10
        totalElements: 1
        totalPages: 1
        first: true
        last: true

    booksExample:
      summary: Example books response
      description: A sample response showing paginated books
      value:
        content:
          - id: 1
            isbn: "9780451524935"
            author: "George Orwell"
            title: "1984"
            description: "Dystopian novel about totalitarian surveillance"
            quantity: 100
            price: 19.99
          - id: 2
            isbn: "9780439708180"
            author: "J.K. Rowling"
            title: "Harry Potter and the Sorcerer's Stone"
            description: "First book in the Harry Potter series"
            quantity: 200
            price: 24.99
        page: 0
        size: 10
        totalElements: 2
        totalPages: 1
        first: true
        last: true

    customerExample:
      summary: Single customer example
      description: Example of a single customer response
      value:
        id: 101
        email: "alice.smith@example.com"
        username: "alice_smith"
        address: "123 Maple Street, Springfield"
        balance: 150.75

    customersExample:
      summary: Example customers response
      description: A sample response showing paginated customers
      value:
        content:
          - id: 101
            email: "alice.smith@example.com"
            username: "alice_smith"
            address: "123 Maple Street, Springfield"
            balance: 150.75
          - id: 102
            email: "bob.johnson@example.com"
            username: "bob_johnson"
            address: "456 Oak Avenue, Springfield"
            balance: 85.50
        page: 0
        size: 10
        totalElements: 2
        totalPages: 1
        first: true
        last: true

    adminExample:
      summary: Single admin example
      description: Example of a single admin response
      value:
        id: 1
        username: "admin_user"
        email: "admin@bookstore.com"

    adminsExample:
      summary: Example admins response
      description: A sample response showing paginated admins
      value:
        content:
          - id: 1
            username: "admin_user"
            email: "admin@bookstore.com"
          - id: 2
            username: "super_admin"
            email: "superadmin@bookstore.com"
        page: 0
        size: 10
        totalElements: 2
        totalPages: 1
        first: true
        last: true

    bookExample:
      summary: Single book example
      description: Example of a single book response
      value:
        id: 1
        isbn: "9780451524935"
        author: "George Orwell"
        title: "1984"
        description: "Dystopian novel about totalitarian surveillance"
        quantity: 100
        price: 19.99

    bookFieldUpdateExample:
      summary: Book field update example
      description: Example of a book field update request
      value:
        field: "price"
        oldValue: "24.99"
        newValue: "19.99"

    orderRequestExample:
      summary: Order request example
      description: Example of placing a new order
      value:
        items:
          - book:
              id: 1
            quantity: 2
          - book:
              id: 2
            quantity: 1

    registerRequestExample:
      summary: Register request example
      description: Example of user registration request
      value:
        username: "new_user"
        password: "securePassword123"
        email: "newuser@example.com"

    registerResponseExample:
      summary: Register response example
      description: Example of successful user registration response
      value:
        id: 103
        username: "new_user"
        email: "newuser@example.com"
        message: "User registered successfully"

    loginRequestExample:
      summary: Login request example
      description: Example of user login request
      value:
        username: "john_doe"
        password: "mypassword"

    jwtResponseExample:
      summary: JWT response example
      description: Example of successful login response with JWT token
      value:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type: "Bearer"
        username: "john_doe"
        role: "CUSTOMER"

    createUserRequestExample:
      summary: Create user request example
      description: Example of admin creating a new user
      value:
        username: "new_admin"
        password: "adminPassword123"
        email: "newadmin@bookstore.com"
        role: "ADMIN"

    userCreatedResponseExample:
      summary: User created response example
      description: Example of successful user creation response
      value:
        id: 3
        username: "new_admin"
        email: "newadmin@bookstore.com"
        role: "ADMIN"
        message: "Admin user created successfully"

    errorNotFoundExample:
      summary: Not found error example
      description: Example of a 404 error response
      value:
        success: false
        timestamp: "2025-08-23T10:30:00"
        message: "Entity not found"
        details: "uri=/book/999"
        httpStatus: "NOT_FOUND"

    errorValidationExample:
      summary: Validation error example
      description: Example of validation errors
      value:
        timeStamp: "2025-08-23T10:30:00"
        httpStatus: "BAD_REQUEST"
        violations:
          - field: "email"
            message: "must be a well-formed email address"
          - field: "username"
            message: "size must be between 3 and 20"

    errorUnauthorizedExample:
      summary: Unauthorized error example
      description: Example of a 401 error response
      value:
        success: false
        timestamp: "2025-08-23T10:30:00"
        message: "Bad credentials"
        details: "uri=/auth/login"
        httpStatus: "UNAUTHORIZED"

    errorForbiddenExample:
      summary: Forbidden error example
      description: Example of a 403 error response
      value:
        success: false
        timestamp: "2025-08-23T10:30:00"
        message: "Access is denied"
        details: "uri=/admin/create-user"
        httpStatus: "FORBIDDEN"

    errorConflictExample:
      summary: Conflict error example
      description: Example of a 409 error response
      value:
        success: false
        timestamp: "2025-08-23T10:30:00"
        message: "Username already exists"
        details: "uri=/auth/register"
        httpStatus: "CONFLICT"

    errorBadRequestExample:
      summary: Bad request error example
      description: Example of a 400 error response
      value:
        success: false
        timestamp: "2025-08-23T10:30:00"
        message: "Invalid request parameters"
        details: "uri=/order"
        httpStatus: "BAD_REQUEST"