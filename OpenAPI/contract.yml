openapi: 3.0.1
info:
  title: Bookstore API
  version: 1.1.0
  description: Comprehensive API for managing bookstore operations including orders, customers, and admins
servers:
  - url: 'http://localhost:8080/'
    description: Development Environment

tags:
  - name: Orders
    description: Operations related to orders
  - name: Customers
    description: Operations related to customers
  - name: Admins
    description: Operations related to administrators
  - name: Books
    description: Operations related to books
  - name: Auth
    description: Authentication operations
  - name: Files
    description: Operations related to files

paths:
  # Orders endpoints
  /admin/order:
    get:
      tags:
        - Orders
      summary: Find all orders
      description: Retrieve a paginated list of orders
      operationId: findAllOrders
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Page size
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/PaginatedOrderResponse'
              examples:
                ordersExample:
                  $ref: 'examples.json#/ordersExample'
        '400':
          description: Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  /order:
    post:
      tags:
        - Orders
      summary: Place a new order
      description: Create a new order with customer, book, and items
      operationId: placeOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'schemas.json#/orderRequest'
            example:
              customer:
                id: 1
                username: "John Doe"
              items:
                - book:
                    id: 1
                    title: "Spring Boot Guide"
                    price: 29.99
                  quantity: 2
      responses:
        '201':
          description: Successfully created the order
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/orderResponse'
        '400':
          description: Invalid request body (missing fields, invalid format)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'schemas.json#/CustomError'
                  - $ref: 'schemas.json#/ValidationError'
              examples:
                badRequestExample:
                  $ref: 'examples.json#/errorBadRequestExample'
                validationExample:
                  $ref: 'examples.json#/errorValidationExample'
        '404':
          description: Customer or Book not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
              examples:
                notFoundExample:
                  $ref: 'examples.json#/errorNotFoundExample'
        '409':
          description: Requested quantity exceeds available stock
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
  /order/{id}/cancel:
    post:
      tags:
        - Orders
      summary: Cancel an order
      description: Cancel a specific order by its ID
      operationId: cancelOrder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order to cancel
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: 'schemas.json#/CancelOrderRequest'
            example:
              reason: "Item no longer needed"
      responses:
        '200':
          description: Successfully canceled the order
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/orderResponse'
        '400':
          description: Invalid request (e.g., order already shipped)
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  /admin/order/{id}:
    get:
      tags:
        - Orders
      summary: Find order by ID
      description: Retrieve a specific order by its ID
      operationId: findOrderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order
      responses:
        '200':
          description: Successfully retrieved the order
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/orderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
    delete:
      tags:
        - Orders
      summary: Delete order by ID
      description: Delete a specific order by its ID
      operationId: deleteOrderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order to delete
      responses:
        '204':
          description: Successfully deleted the order
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
    put:
      tags:
        - Orders
      summary: Update order status
      description: Update the status of a specific order by its ID
      operationId: updateOrderStatus
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'schemas.json#/UpdateOrderStatusRequest'
            example:
              status: "SHIPPED"
      responses:
        '200':
          description: Successfully updated the order status
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/orderResponse'
        '400':
          description: Invalid request body (missing fields, invalid format)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'schemas.json#/CustomError'
                  - $ref: 'schemas.json#/ValidationError'
              examples:
                badRequestExample:
                  $ref: 'examples.json#/errorBadRequestExample'
                validationExample:
                  $ref: 'examples.json#/errorValidationExample'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
        '409':
          description: Invalid status transition
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  /order/customer:
    get:
      tags:
        - Orders
      summary: Find Previous orders For Logged In Customer
      description: Retrieve all orders by logged-in customer id
      operationId: findPreviousOrders
      responses:
        '200':
          description: Successfully retrieved the orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'schemas.json#/orderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  # Customer endpoints
  /customer:
    get:
      summary: Get all customers (paginated)
      tags:
        - Customers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/PaginatedCustomerResponse'

  /customer/{id}:
    get:
      summary: Get customer by ID
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/Customer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

    delete:
      summary: Delete customer by ID
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Customer deleted
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  # Admin endpoints
  /admin:
    get:
      summary: Get all admins (paginated)
      tags:
        - Admins
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of admins
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/PaginatedAdminResponse'

  /admin/{id}:
    get:
      summary: Get admin by ID
      tags:
        - Admins
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Admin details
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/Admin'
        '404':
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

    delete:
      summary: Delete admin by ID
      tags:
        - Admins
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Admin deleted
        '404':
          description: Admin not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  /admin/create-user:
    post:
      summary: Create a new user with role (Admin only)
      tags:
        - Admins
      operationId: createUserWithRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'schemas.json#/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/UserCreatedResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: 'schemas.json#/CustomError'
                  - $ref: 'schemas.json#/ValidationError'
              examples:
                badRequestExample:
                  $ref: 'examples.json#/errorBadRequestExample'
                validationExample:
                  $ref: 'examples.json#/errorValidationExample'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  /admin/book/{id}/update-field:
    patch:
      summary: Log a book field update
      tags:
        - Admins
      operationId: logBookFieldUpdate
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'schemas.json#/BookFieldUpdate'
      responses:
        '200':
          description: Book field update logged
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  # Books endpoints
  /book:
    get:
      tags:
        - Books
      summary: Find all books
      description: Retrieve a paginated list of books
      operationId: findAllBooks
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Page size
      responses:
        '200':
          description: Successfully retrieved books
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/PaginatedBookResponse'
              examples:
                booksExample:
                  $ref: 'examples.json#/booksExample'

    post:
      tags:
        - Books
      summary: Create a new book
      description: Add a new book to the system
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'schemas.json#/BookCreateRequest'
      responses:
        '201':
          description: Successfully created book
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/Book'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  /book/{id}:
    get:
      tags:
        - Books
      summary: Find book by ID
      description: Retrieve a specific book by ID
      operationId: findBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved the book
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

    delete:
      tags:
        - Books
      summary: Delete book by ID
      description: Delete a specific book
      operationId: deleteBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfully deleted the book
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
  /book/{id}/cover:
    post:
      tags:
        - Books
      summary: Upload a cover image for a book
      description: Uploads a cover image file for the specified book and updates its cover image URL
      operationId: uploadBookCover
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the book
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: 'schemas.json#/FileUploadRequest'
      responses:
        '200':
          description: Successfully uploaded the cover image
          content:
            text/plain:
              schema:
                type: string
                description: URL of the uploaded cover image
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  /book/isbn/{isbn}:
    get:
      tags:
        - Books
      summary: Find book by ISBN
      description: Retrieve a specific book by its ISBN
      operationId: findBookByIsbn
      parameters:
        - in: path
          name: isbn
          required: true
          schema:
            type: string
            pattern: '^(97[89])?[0-9]{9}[0-9X]$'
          description: 'ISBN-10 or ISBN-13 of the book'
          example: '9780134685991'
      responses:
        '200':
          description: Successfully retrieved the book
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'

  # Auth endpoints
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'schemas.json#/LoginRequest'
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/JwtResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
              examples:
                unauthorizedExample:
                  $ref: 'examples.json#/errorUnauthorizedExample'

  /auth/register:
    post:
      tags:
        - Auth
      summary: Register new customer
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: 'schemas.json#/RegisterRequest'
      responses:
        '201':
          description: Customer registered successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: 'schemas.json#/CustomError'
              examples:
                conflictExample:
                  $ref: 'examples.json#/errorConflictExample'
  /files/{filename}:
    get:
      tags:
        - Files
      summary: Serve a book cover file
      description: Returns the requested book cover image file by filename
      operationId: serveFile
      parameters:
        - in: path
          name: filename
          required: true
          schema:
            type: string
          description: Name of the file to retrieve (e.g., cover.jpg)
      responses:
        '200':
          description: The requested file
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found