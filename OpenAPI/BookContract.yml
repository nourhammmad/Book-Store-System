openapi: 3.0.1
info:
  title: Books API
  version: 1.0.0
  description: API for managing books in the Book Store System

servers:
  - url: 'http://localhost:8080/'
    description: Development Environment

tags:
  - name: Books
    description: Operations related to books

paths:
  /books:
    get:
      tags:
        - Books
      summary: Find all books
      description: Retrieve a paginated list of books
      operationId: findAllBooks
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Page size
      responses:
        '200':
          description: Successfully retrieved books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/books'
              examples:
                booksExample:
                  $ref: '#/components/examples/booksExample'

    post:
      tags:
        - Books
      summary: Create a new book
      description: Add a new book to the system
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
            examples:
              booksExample:
                $ref: '#/components/examples/booksExample'

      responses:
        '201':
          description: Successfully created book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'

  /books/{id}:
    get:
      tags:
        - Books
      summary: Find book by ID
      description: Retrieve a specific book by ID
      operationId: findBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the book
      responses:
        '200':
          description: Successfully retrieved the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

    put:
      tags:
        - Books
      summary: Update book by ID
      description: Update all attributes of a specific book
      operationId: updateBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the book to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'

      responses:
        '200':
          description: Successfully updated the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'


    delete:
      tags:
        - Books
      summary: Delete book by ID
      description: Delete a specific book by ID
      operationId: deleteBookById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the book to delete
      responses:
        '204':
          description: Successfully deleted the book
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomError'

components:
  schemas:
    books:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/book'

    book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        author:
          type: string
        title:
          type: string
        description:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: float




    CustomError:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string

  examples:
    booksExample:
      value:
        books:
          - id: 1
            author: "George Orwell"
            title: "1984"
            description: "Dystopian novel"
            quantity: 100
            price: 19.99
          - id: 2
            author: "J.K. Rowling"
            title: "Harry Potter and the Sorcerer's Stone"
            description: "Fantasy novel"
            quantity: 200
            price: 24.99
