openapi: "3.1.0"
info:
  title: "Book_Store_System API"
  description: "Book_Store_System API"
  version: "1.0.0"
servers:
  - url: "https://Book_Store_System"
paths:
  /api/books:
    get:
      summary: "GET api/books"
      operationId: "getAllBooks"
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BookDTO"
  /api/books/addbook:
    post:
      summary: "POST api/books/addbook"
      operationId: "AddBook"
      parameters:
        - name: "title"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "author"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "quantity"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "price"
          in: "query"
          required: true
          schema:
            type: "number"
            format: "float"
        - name: "description"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BookDTO"
  /api/books/{id}:
    get:
      summary: "GET api/books/{id}"
      operationId: "GetBookById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BookDTO"
  /api/books/update/{id}:
    put:
      summary: "PUT api/books/update/{id}"
      operationId: "UpdateBook"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BookDTO"
  /api/books/delete/{id}:
    delete:
      summary: "DELETE api/books/delete/{id}"
      operationId: "DeleteBook"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BookDTO"
components:
  schemas:
    BookDTO:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          nullable: true
        author:
          type: "string"
          nullable: true
        title:
          type: "string"
          nullable: true
        description:
          type: "string"
          nullable: true
        quantity:
          type: "integer"
          format: "int32"
          nullable: true
        price:
          type: "number"
          format: "float"
          nullable: true
    Book:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          nullable: true
        author:
          type: "string"
          nullable: true
        title:
          type: "string"
          nullable: true
        description:
          type: "string"
          nullable: true
        quantity:
          type: "integer"
          format: "int32"
          nullable: true
        price:
          type: "number"
          format: "float"
          nullable: true