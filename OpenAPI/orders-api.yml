openapi: 3.0.1
info:
  title: Orders API
  version: 1.1.0
  description: API for managing customer orders in the Book Store System
servers:
  - url: 'https://localhost:8080/'
    description: Development Environment

tags:
  - name: Orders
    description: Operations related to orders

paths:
  /orders:
    get:
      tags:
        - Orders
      summary: Find all orders
      description: Retrieve a paginated list of orders
      operationId: findAllOrders
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number
        - in: query
          name: size
          schema:
            type: integer
            default: 10
          description: Page size
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/orders'
              examples:
                ordersExample:
                  $ref: '#/components/examples/ordersExample'
        '400':
          description: Invalid pagination parameters
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

    post:
      tags:
        - Orders
      summary: Place a new order
      description: Create a new order with customer, book, and items
      operationId: placeOrder
      requestBody:
        required: true
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/order'
            example:
              customer:
                id: 1
                name: "John Doe"
              items:
                - book:
                    id: 1
                    title: "Spring Boot Guide"
                    price: 29.99
                  quantity: 2
      responses:
        '201':
          description: Successfully created the order
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/order'
        '400':
          description: Invalid request body (missing fields, invalid format)
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'
        '404':
          description: Customer or Book not found
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'
        '409':
          description: Requested quantity exceeds available stock
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Find order by ID
      description: Retrieve a specific order by its ID
      operationId: findOrderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the order
      responses:
        '200':
          description: Successfully retrieved the order
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/order'
        '404':
          description: Order not found
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

    delete:
      tags:
        - Orders
      summary: Delete order by ID
      description: Delete a specific order by its ID
      operationId: deleteOrderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the order to delete
      responses:
        '204':
          description: Successfully deleted the order
        '404':
          description: Order not found
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

    patch:
      tags:
        - Orders
      summary: Update an order
      description: Update specific fields of an order (e.g., status, items)
      operationId: updateOrder
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json;charset=utf-8:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [PLACED, PROCESSING, COMPLETED, CANCELLED]
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/orderItem'
      responses:
        '200':
          description: Successfully updated the order
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/order'
        '400':
          description: Invalid update request
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'
        '404':
          description: Order not found
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'
        '409':
          description: Update conflict (e.g., changing to invalid status)
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/CustomError'

components:
  schemas:
    orders:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/order'

    order:
      type: object
      properties:
        id:
          type: integer
        orderDate:
          type: string
          format: date-time
        totalPrice:
          type: number
          format: float
        status:
          type: string
          enum: [PLACED, PROCESSING, COMPLETED, CANCELLED]
        customer:
          $ref: '#/components/schemas/customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/orderItem'

    orderItem:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: integer
        price:
          type: number
          format: float
        book:
          $ref: '#/components/schemas/book'

    customer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        price:
          type: number
          format: float

    CustomError:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string

  examples:
    ordersExample:
      value:
        orders:
          - id: 1
            orderDate: "2025-08-14T15:30:00Z"
            totalPrice: 59.98
            status: PLACED
            customer:
              id: 1
              name: "John Doe"
            items:
              - id: 1
                quantity: 2
                price: 59.98
                book:
                  id: 1
                  title: "Spring Boot Guide"
                  price: 29.99
